steps:
  - script: |
      mkdir -v ${datadir=/tmp/data}
      echo "##vso[task.setvariable variable=DATADIR]$datadir"
      echo "##vso[task.setvariable variable=DDATADIR]${ddatadir=/${datadir##*/}}"
      echo "$datadir" "$ddatadir"
    displayName: Create data directory

  - script: |
      sudo tee ${out=/usr/local/bin/drun} <<'.'
        docker run --tty --log-driver=none \
          --mount type=bind,src=$(Build.SourcesDirectory),dst=/repo \
          --mount type=bind,src=$DATADIR,dst=$DDATADIR \
          --workdir "${cwd-$BUILDDIR}" \
          ghcr.io/250/club-250-base:debian "$@"
      .
      sudo chmod -v +x "$out"
    displayName: Install "drun" command

  - script: |
      sudo tee ${php=/usr/local/bin/php} ${composer=/usr/local/bin/composer} <<'.'
        cwd=/repo drun "$(basename "$0")" "$@"
      .
      sudo chmod -v +x "$php" "$composer"
    displayName: Overload "php" and "composer" commands

  - template: php.yml

  - script: |
      build=A$(Build.BuildId)
      echo "##vso[task.setvariable variable=AZURE_BUILD_NUMBER]$build"
      echo $build
    displayName: Declare build number (A$(Build.BuildId))

  - script: |
      sudo tee ${out=/usr/local/bin/250} <<-'.'
        drun /repo/bin/250 -v "$@"
      .
      sudo chmod -v +x "$out"
    displayName: Install "250" command

  - script: |
      sudo tee ${out=/usr/local/bin/data} <<-'.'
        retry drun env \
          GOOGLE_CLIENT_SECRET=$(GOOGLE_CLIENT_SECRET) \
          GOOGLE_REFRESH_TOKEN=$(GOOGLE_REFRESH_TOKEN) \
          php -d memory_limit=-1 /repo/vendor/bin/250\ data -v "$@"
      .
      sudo chmod -v +x "$out"
    displayName: Install "data" command

  - script: |
      sudo tee ${out=/usr/local/bin/retry} <<-'.'
        for i in {1..20}; do
          ((i > 1)) && {
            echo Retry \#$((i - 1))...
            sleep $i
          }
      
          "$@" && exit
        done
      .
      sudo chmod -v +x "$out"
    displayName: Install "retry" command

  - script: |
      marker=$AZURE_BUILD_NUMBER.date
      
      if [[ $SYSTEM_PHASENAME = Initialize ]]; then
        date=$(date -u +%Y%m/%d | tee $marker)
        cwd=$DDATADIR data upload $marker || exit
      else
        cwd=$DDATADIR data download -w $marker
        date=$(cat $marker)
      fi
      
      echo $date
      echo "##vso[task.setvariable variable=DATE]$date"
      echo "##vso[task.setvariable variable=MARKER]$marker"
      
      [[ -r $marker ]]
    displayName: Upload/download date marker
    workingDirectory: $(DATADIR)

  - script: |
      drun mkdir -pv "${builddir=$DDATADIR/$DATE/$AZURE_BUILD_NUMBER}"
      echo "##vso[task.setvariable variable=BUILDDIR]$builddir"
      echo Build directory: "$builddir"
      
      rbuilddir=${builddir#$DDATADIR/}
      echo "##vso[task.setvariable variable=RBUILDDIR]$rbuilddir"
      echo Remote build directory: "$rbuilddir"
    displayName: Create build directory

  - script: data download -w "$RBUILDDIR"
    displayName: Restore build directory state
    condition: not(eq(variables['System.PhaseName'], 'Initialize'))
